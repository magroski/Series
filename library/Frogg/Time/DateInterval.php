<?php
/**
 * This object is used to treat a time variable as a date interval
 */
class Frogg_Time_DateInterval{
		private $time;
		
		/**
		 * If only $time is passed, it'll calculate the interval between time() and $time.
		 * If $time and $time2 are passed, it'll calculate the absolute interval between $time and $time2.
		 * @param mixed $time Unix timestamp generated by time() or mktime() functions OR a string timestamp
		 * @param mixed $time2 Same as $time, but $time2 must always represent a moment that happened before $time
		 */
		public function __construct($time){
			$this->time = time() - $time;
		}
	
		/**
		 * Returns the length of the interval in years
		 */
		public function toYears() {
			return floor($this->toDays()/365);
		}
		
		/**
		 * Returns the length of the interval in months
		 */
		public function toMonths() {
			return floor(($this->toDays())/30);
		}
		
		/**
		 * Returns the length of the interval in days
		 */
		public function toDays() {
			return floor(($this->toHours())/24);			
		}
		
		/**
		 * Returns the length of the interval in hours
		 */
		public function toHours() {
			return floor(($this->toMinutes())/60);
		}
		
		/**
		 * Returns the length of the interval in minutes
		 */
		public function toMinutes() {
			return floor(($this->toSeconds())/60);
		}
		
		/**
		 * Returns the length of the interval in seconds
		 */
		public function toSeconds() {
			return $this->time*1;
		}
		
		/**
		 * Returns the interval as a string. <br/>
		 * Example: 4 seconds ago , 5 days ago, 1 hour ago...
		 */
		public function __toString() {
			require APPLICATION_PATH.'/../library/Frogg/lang/'.LANGUAGE.'.php';
			if($this->time < 60){				
				return ($this->time==1)?$this->time.' '.$lang['second_ago']:$this->time.' '.$lang['seconds_ago'];
			}
			if($this->time < 3600){
				return ($this->toMinutes()==1)?$this->toMinutes().' '.$lang['minute_ago']:$this->toMinutes().' '.$lang['minutes_ago'];
			}
			if($this->time < 86400){
				return ($this->toHours()==1)?$this->toHours().' '.$lang['hour_ago']:$this->toHours().' '.$lang['hours_ago'];
			} 
			if($this->time < 2592000){
				return ($this->toDays()==1)?$this->toDays().' '.$lang['day_ago']:$this->toDays().' '.$lang['days_ago'];
			}
			if($this->time < 31536000){
				return ($this->toMonths()==1)?$this->toMonths().' '.$lang['month_ago']:$this->toMonths().' '.$lang['months_ago'];
			} else {
				return ($this->toYears()==1)?$this->toYears().' '.$lang['year_ago']:$this->toYears().' '.$lang['years_ago'];
			}
		}
}
